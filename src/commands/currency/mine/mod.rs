use mathbot::{command::{Command, CommandCategory, CommandHelp, CommandParams}, model::account::{Account, AccountController, AccountQueryKey, MineItem}, ui::{embed::{base_embed, ColorType, EmbedCtx}, PageMessage}, vec_of_strings, Result};
use serenity::all::CreateEmbed;

mod claim;
mod buy;
mod set;
mod remove;

async fn mine(params: CommandParams) -> Result<()> {
    let account = params.require_account()?;
    let mine = AccountController::new(
        params.state.get_model_controller(), AccountQueryKey::id(account.id)).fetch_mine().await?;
    let minepages = match mine.len() {
        0 => 0,
        len => (len-1)/6 + 1
    };
    let mut currentpage = 1;

    if let Some(input) = params.args.get(0) {
        if let Ok(page) = input.parse::<usize>() {
            if page >= 1 && page <= minepages {
                currentpage = page;
            }
        }
    }

    let mut message = PageMessage::new(
        &params, mine, minepages, currentpage, mine_embed, account.clone(), 
    );
    let message = message.send().await?;
    while let Some(_) = message.run(30).await? {}

    Ok(())
}

fn mine_embed(params: &CommandParams, account: &Account, mine: &Vec<MineItem>, page: &usize) -> CreateEmbed {
    let mut fields = Vec::new();
    let mut page = page.clone();
    if page == 0 || page*6-6 >= mine.len() {
        page = 1;
    }
    let totalmps: f64 = mine.iter().filter_map(|item| item.mps?).sum();
    
    /*{
        let mut mps = 0.0;
        for item in mine {
            if let Some(itemmps) = item.mps {
                mps += itemmps;
            }
        }
    };*/

    for i in page*6-6..page*6 {
        let fieldvalue = match mine.get(i) {
            Some(mineitem) => {
                if let (Some(item_id), Some(emoji_id), Some(display_name), Some(Some(mps))) = (&mineitem.item_id, &mineitem.emoji_id, &mineitem.display_name, &mineitem.mps) {
                    format!("{}**{}**\n`{} MTC$/h`", 
                        if let Some(emoji_str) = emoji_id {format!("{emoji_str} ")} else {String::new()},
                        display_name,
                        mps*3600.0,
                    )
                } else {
                    "Empty\n`0 MTC$/h`".to_string()
                }
            },
            None => format!("Locked{}", //TODO: implement slot prices
                if (account.mine_slots as usize) == i {format!("\nCost: `{}MTC$`", get_slot_price(i))} else {String::new()}
            )
        };

        fields.push(
            (format!("Slot {}", i+1),
            fieldvalue,
            true)
        );
    }
    base_embed(&EmbedCtx::from_account(account), ColorType::Currency)
        .title(format!("@{}'s mining facility, page {page}", account.username))
        .description(format!("Total production: `{:.1}MTC$/h`", totalmps * 3600.0))
        .fields(fields)
}


///The slot parameter is 0 indexed
fn get_slot_price(slot: usize) -> i64 {
    match slot {
        ..=371 => SLOT_PRICES[slot].clone(),
        _ => 80000000000000,
    }
}

pub fn command() -> Result<Command> {
    let category = CommandCategory::Currency;
    Ok(
    Command::new(
        mine,
        vec_of_strings!("mine", "min"),
        category.clone(),
        CommandHelp::new("Look what you have in your mining facility", "")
    ).register(vec![
        Command::new(
            claim::claim,
            vec_of_strings!("claim"),
            category.clone(),
            CommandHelp::new("Claim the MathCoins your mining facility has mined for you", "")
        ),
        Command::new(
            buy::buy,
            vec_of_strings!("buy"),
            category.clone(),
            CommandHelp::new("Buy a new slot in your mine", "")
        ),
        Command::new(
            set::set,
            vec_of_strings!("set"),
            category.clone(),
            CommandHelp::new("Set an item in a mine slot", " {slot} {itemid}")
        ),
        Command::new(
            remove::remove,
            vec_of_strings!("remove"),
            category.clone(),
            CommandHelp::new("Remove an item from a mine slot", " {slot}")
        ),
    ]).unwrap()
    )
}

pub const SLOT_PRICES: &'static [i64; 372] = &[0i64, 150i64, 250i64, 350i64, 550i64, 850i64, 1300i64, 2000i64, 3050i64, 4650i64, 7050i64, 10600i64, 15850i64, 23550i64, 34750i64, 50950i64, 74250i64, 107450i64, 154600i64, 220950i64, 313900i64, 443200i64, 622050i64, 867950i64, 1204050i64, 1660800i64, 2278000i64, 3107350i64, 4215700i64, 5688850i64, 7636600i64, 10198350i64, 13550500i64, 17914650i64, 23568350i64, 30856850i64, 40207900i64, 52148700i64, 67325850i64, 86528750i64, 110716550i64, 141049300i64, 178923750i64, 226014050i64, 284318200i64, 356210300i64, 444499500i64, 552495800i64, 684083250i64, 843801400i64, 1036934450i64, 1269609750i64, 1548904550i64, 1882962800i64, 2281120350i64, 2754040800i64, 3313859650i64, 3974338900i64, 4751029850i64, 5661445600i64, 6725241100i64, 7964401550i64, 9403437450i64, 11069585900i64, 12993017250i64, 15207045300i64, 17748340650i64, 20657145150i64, 23977486400i64, 27757390150i64, 32049089500i64, 36909228750i64, 42399060050i64, 48584631250i64, 55536962450i64, 63332210200i64, 72051816500i64, 81782641300i64, 92617076450i64, 104653139600i64, 117994545600i64, 132750755200i64, 149036997950i64, 166974269550i64, 186689301450i64, 208314502250i64, 231987870100i64, 257852875300i64, 286058313150i64, 316758126250i64, 350111197400i64, 386281111750i64, 425435890950i64, 467747697200i64, 513392511450i64, 562549783250i64, 615402057200i64, 672134574150i64, 732934852000i64, 797992244500i64, 867497484150i64, 941642206300i64, 1020618462350i64, 1104618218350i64, 1193832847250i64, 1288452611550i64, 1388666144300i64, 1494659925450i64, 1606617761500i64, 1724720265300i64, 1849144344100i64, 1980062692450i64, 2117643297750i64, 2262048955600i64, 2413436801600i64, 2571957857150i64, 2737756595850i64, 2910970527100i64, 3091729803650i64, 3280156850000i64, 3476366016650i64, 3680463258200i64, 3892545839450i64, 4112702067150i64, 4341011050950i64, 4577542491750i64, 4822356499850i64, 5075503441350i64, 5337023814050i64, 5606948152750i64, 5885296962500i64, 6172080681800i64, 6467299672450i64, 6770944238400i64, 7082994670100i64, 7403421316450i64, 7732184680700i64, 8069235541650i64, 8414515097700i64, 8767955133350i64, 9129478206600i64, 9498997856750i64, 9876418830100i64, 10261637324200i64, 10654541247050i64, 11055010492300i64, 11462917226950i64, 11878126192400i64, 12300495015200i64, 12729874528800i64, 13166109102200i64, 13609036977200i64, 14058490610000i64, 14514297018900i64, 14976278134000i64, 15444251150850i64, 15918028883650i64, 16397420120250i64, 16882229974900i64, 17372260240550i64, 17867309737150i64, 18367174657800i64, 18871648909200i64, 19380524448100i64, 19893591611250i64, 20410639439300i64, 20931455993300i64, 21455828664050i64, 21983544472850i64, 22514390364250i64, 23048153489300i64, 23584621480050i64, 24123582714000i64, 24664826569250i64, 25208143668900i64, 25753326115850i64, 26300167716900i64, 26848464196500i64, 27398013399850i64, 27948615485700i64, 28500073108400i64, 29052191589400i64, 29604779078800i64, 30157646705600i64, 30710608718950i64, 31263482618100i64, 31816089273450i64, 32368253037000i64, 32919801843950i64, 33470567304250i64, 34020384785950i64, 34569093488400i64, 35116536508400i64, 35662560896100i64, 36207017704950i64, 36749762031450i64, 37290653049600i64, 37829554036150i64, 38366332390400i64, 38900859645900i64, 39433011477200i64, 39962667698800i64, 40489712259950i64, 41014033232350i64, 41535522793850i64, 42054077206000i64, 42569596787950i64, 43081985884900i64, 43591152833300i64, 44097009921050i64, 44599473345250i64, 45098463165350i64, 45593903254000i64, 46085721244400i64, 46573848475350i64, 47058219933350i64, 47538774192900i64, 48015453354400i64, 48488202980300i64, 48956972029700i64, 49421712791100i64, 49882380814400i64, 50338934841200i64, 50791336734650i64, 51239551407950i64, 51683546752800i64, 52123293566800i64, 52558765480800i64, 52989938885850i64, 53416792860150i64, 53839309095800i64, 54257471825900i64, 54671267751600i64, 55080685969600i64, 55485717900150i64, 55886357215000i64, 56282599766950i64, 56674443518500i64, 57061888473000i64, 57444936604800i64, 57823591791650i64, 58197859747000i64, 58567747953850i64, 58933265599100i64, 59294423509250i64, 59651234087000i64, 60003711248900i64, 60351870364200i64, 60695728194750i64, 61035302836100i64, 61370613659800i64, 61701681256750i64, 62028527382000i64, 62351174900500i64, 62669647734250i64, 62983970810700i64, 63294170012050i64, 63600272126450i64, 63902304799500i64, 64200296488150i64, 64494276414350i64, 64784274521800i64, 65070321431550i64, 65352448401650i64, 65630687284800i64, 65905070490550i64, 66175630945250i64, 66442402056450i64, 66705417675500i64, 66964712063850i64, 67220319858000i64, 67472276038150i64, 67720615895200i64, 67965375001450i64, 68206589179850i64, 68444294476750i64, 68678527133150i64, 68909323559300i64, 69136720308150i64, 69360754051750i64, 69581461556400i64, 69798879661150i64, 70013045254650i64, 70223995255250i64, 70431766589750i64, 70636396175100i64, 70837920898750i64, 71036377602000i64, 71231803061750i64, 71424233975500i64, 71613706944600i64, 71800258460500i64, 71983924889550i64, 72164742460550i64, 72342747250850i64, 72517975175100i64, 72690461972750i64, 72860243197900i64, 73027354208000i64, 73191830154800i64, 73353705974100i64, 73513016377850i64, 73669795845000i64, 73824078614350i64, 73975898676500i64, 74125289767800i64, 74272285362850i64, 74416918669550i64, 74559222622500i64, 74699229878500i64, 74836972811250i64, 74972483507200i64, 75105793761100i64, 75236935072550i64, 75365938642350i64, 75492835369400i64, 75617655848050i64, 75740430365250i64, 75861188898750i64, 75979961114600i64, 76096776366000i64, 76211663691300i64, 76324651813300i64, 76435769137750i64, 76545043753100i64, 76652503429400i64, 76758175618550i64, 76862087453450i64, 76964265748700i64, 77064737000200i64, 77163527386100i64, 77260662766600i64, 77356168685500i64, 77450070370100i64, 77542392733100i64, 77633160372750i64, 77722397574900i64, 77810128313700i64, 77896376253450i64, 77981164749950i64, 78064516852200i64, 78146455304200i64, 78227002546650i64, 78306180719050i64, 78384011661550i64, 78460516917100i64, 78535717733550i64, 78609635065900i64, 78682289578450i64, 78753701647350i64, 78823891362750i64, 78892878531300i64, 78960682678750i64, 79027323052150i64, 79092818622800i64, 79157188088500i64, 79220449876350i64, 79282622145350i64, 79343722788950i64, 79403769438100i64, 79462779463350i64, 79520769978400i64, 79577757841900i64, 79633759661200i64, 79688791794150i64, 79742870352850i64, 79796011205450i64, 79848229979950i64, 79899542065850i64, 79949962618350i64, 79999506559500i64, 80000000000000i64];